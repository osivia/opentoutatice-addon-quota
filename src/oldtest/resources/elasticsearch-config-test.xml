<?xml version="1.0"?>
<component name="org.nuxeo.elasticsearch.test.contrib">

	<extension
		target="org.nuxeo.elasticsearch.ElasticSearchComponent"
		point="elasticSearchLocal">
		<elasticSearchLocal
			clusterName="nuxeoTestClusterLocal" nodeName="nuxeoTestNode"
			indexStoreType="memory" httpEnabled="true" />
	</extension>

	<!-- <extension target="org.nuxeo.elasticsearch.ElasticSearchComponent" 
		point="elasticSearchLocal"> <elasticSearchLocal clusterName="nuxeoTestClusterLocalFs" 
		nodeName="nuxeoTestNode" pathData="/tmp/elasticsearch" indexStoreType="mmapfs" 
		httpEnabled="true" /> </extension> <extension target="org.nuxeo.elasticsearch.ElasticSearchComponent" 
		point="elasticSearchRemote"> <elasticSearchRemote clusterName="elasticsearch" 
		addressList="localhost:9300" /> </extension> -->

	<extension
		target="org.nuxeo.elasticsearch.ElasticSearchComponent"
		point="elasticSearchIndex">
		<elasticSearchIndex name="nxutest" type="doc"
			repository="test">
			<settings>
			{
			"analysis" : {
      "filter" : {
         "truncate_filter" : {
            "length" : 256,
            "type" : "truncate"
         },
         "word_delimiter_filter" : {
           "type" : "word_delimiter",
           "preserve_original" : true
         },
         "en_stem_filter" : {
            "name" : "minimal_english",
            "type" : "stemmer"
         },
         "en_stop_filter" : {
            "stopwords" : [
               "_english_"
            ],
            "type" : "stop"
         },
         "fr_elision_filter" : {
            "articles" : [
               "c",
               "l",
               "m",
               "t",
               "qu",
               "n",
               "s",
               "j",
               "d"
            ],
            "type" : "elision"
         },
         "fr_stem_filter" : {
            "name" : "minimal_french",
            "type" : "stemmer"
         },
         "fr_stop_filter" : {
            "stopwords" : [
               "_french_"
            ],
            "type" : "stop"
         }
      },
      "tokenizer" : {
         "path_tokenizer" : {
            "delimiter" : "/",
            "type" : "path_hierarchy"
         }
      },
      "analyzer" : {
         "en_analyzer" : {
            "filter" : [
               "word_delimiter_filter",
               "lowercase",
               "en_stop_filter",
               "en_stem_filter",
               "asciifolding"
            ],
            "type" : "custom",
            "tokenizer" : "standard"
         },
         "fr_analyzer" : {
            "alias" : "fulltext",
            "filter" : [
               "word_delimiter_filter",
               "lowercase",
               "fr_stop_filter",
               "fr_stem_filter",
               "asciifolding",
               "fr_elision_filter"
            ],
            "type" : "custom",
            "tokenizer" : "standard"
         },
         "path_analyzer" : {
            "type" : "custom",
            "tokenizer" : "path_tokenizer"
         },
         "lowercase_analyzer" : {
            "type" : "custom",
            "filter" : [ "truncate_filter", "lowercase", "asciifolding" ],
            "tokenizer" : "keyword"
         },
         "default" : {
            "type" : "custom",
            "filter" : [ "truncate_filter" ],
            "tokenizer" : "keyword"
         }
      }
   }
}
      </settings>
      <mapping>
{
   "_size" : {
      "enabled" : true
   },
   "_all" : {
      "analyzer" : "fulltext"
   },
   "dynamic_templates": [ {
      "no_thumbnail_template": {
         "path_match": "thumb:thumbnail.*",
         "mapping": {
             "index": "no",
             "include_in_all": false
            }
         }
      }, {
      "no_picture_template": {
         "path_match": "picture:views.*",
         "mapping": {
            "index": "no",
            "include_in_all": false
          }
       }
   }],
   "properties" : {
      "dc:title" : {
         "type" : "multi_field",
         "fields" : {
           "dc:title" : {
             "type" : "string"
           },
           "fulltext" : {
             "boost": 2,
             "type": "string",
             "analyzer" : "fulltext"
          },
        "lowercase" : {
            "type":"string",
            "analyzer" : "lowercase_analyzer"       
        }
        }
      },
      "dc:description" : {
         "type" : "multi_field",
         "fields" : {
           "dc:description" : {
             "index" : "no",
             "include_in_all" : true,
             "type" : "string"
           },
           "fulltext" : {
             "boost": 1.5,
             "type": "string",
             "analyzer" : "fulltext"
          }
        }
      },
      "file:content" : {
      	 "type" : "nested",
         "properties" : {
	         "name" : {
	             "index" : "not_analyzed",
	             "type" : "string"
	           },
	           "mime-type" : {
	             "index" : "not_analyzed",
	             "type" : "string"
	           },
	           "encoding" : {
	             "index" : "not_analyzed",
	             "type" : "string"
	           },
	           "digestAlgorithm" : {
	             "index" : "not_analyzed",
	             "type" : "string"
	           },
	           "digest" : {
	             "index" : "not_analyzed",
	             "type" : "string"
	           },
	           "length" : {
	             "index" : "not_analyzed",
	             "type" : "double"
	           }
        }
      },
      "note:note" : {
         "type" : "multi_field",
         "fields" : {
           "note:note" : {
             "index" : "no",
             "include_in_all" : true,
             "type" : "string"
           },
           "fulltext" : {
             "type": "string",
             "analyzer" : "fulltext"
          }
        }
      },
      "ecm:binarytext" : {
         "type" : "string",
         "index" : "no",
         "include_in_all" : true
      },
      "ecm:path" : {
         "type" : "multi_field",
         "fields" : {
            "children" : {
               "search_analyzer" : "keyword",
               "index_analyzer" : "path_analyzer",
               "type" : "string"
            },
            "ecm:path" : {
               "index" : "not_analyzed",
               "type" : "string"
            }
         },
        "include_in_all": false
      },
      "ecm:pos": {
         "type": "integer"
      },
      "dc:created": {
         "format": "dateOptionalTime",
         "type": "date"
      },
      "dc:modified": {
         "format": "dateOptionalTime",
         "type": "date"
      },
      "common:icon": {
         "type": "string",
         "index" : "no",
         "include_in_all" : false
      }
   }
}
</mapping>
		</elasticSearchIndex>
	</extension>

</component>
